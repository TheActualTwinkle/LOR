services:
  database:
    image: postgres:16
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGPORT=31400
    ports:
      - "31400:31400"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 31400 -U postgres"]
      interval: 15s
      timeout: 15s
      retries: 3

  databaseapp:
    build:
      context: .
      dockerfile: Lor.DatabaseApp/Presentation/DatabaseApp.WebApi/Dockerfile
    ports:
      - "31401:31401"
    environment:
      - TZ=Asia/Novosibirsk
      - ASPNETCORE_URLS=${DATABASE_COMMUNICATION_URL}
      - ASPNETCORE_ENVIRONMENT=Production
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_ENDPOINT}
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - ConnectionStrings:DefaultConnection=Host=database:31400;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings:Redis=redis:6379
      - ConnectionStrings:HangfireDb=Host=database:31400;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - RabbitMqSettings:Host=${RABBITMQ_HOST}
      - RabbitMqSettings:Username=${RABBITMQ_USER}
      - RabbitMqSettings:Password=${RABBITMQ_PASSWORD}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
        
  telegrambot:
    build:
      context: .
      dockerfile: Lor.TelegramBotApp/Presentation/TelegramBotApp.Api/Dockerfile
    environment:
      - TZ=Asia/Novosibirsk
      - TelegramSettings:BotToken=${TELEGRAM_BOT_TOKEN}
      - DatabaseApp:Url=${DATABASE_COMMUNICATION_URL}
      - RabbitMqSettings:Host=${RABBITMQ_HOST}
      - RabbitMqSettings:Username=${RABBITMQ_USER}
      - RabbitMqSettings:Password=${RABBITMQ_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy

  groupschedule:
    build:
      context: .
      dockerfile: Lor.GroupScheduleApp/Presentation/GroupScheduleApp.Api/Dockerfile
    environment:
      - TZ=Asia/Novosibirsk
      - DatabaseApp:Url=${DATABASE_COMMUNICATION_URL}
      - ConnectionStrings:HangfireDb=Host=database:31400;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
    depends_on:
      database:
        condition: service_healthy

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 15s
      timeout: 15s
      retries: 3

  rabbitmq:
    image: rabbitmq:management
    hostname: ${RABBITMQ_HOST}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 15s
      retries: 3

  aspire.dashboard:
    image: mcr.microsoft.com/dotnet/nightly/aspire-dashboard:latest
    ports:
      - 18888:18888
      - 18889:18889